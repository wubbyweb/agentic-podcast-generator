"""SQLAlchemy models for the agentic system."""

from sqlalchemy import Column, Integer, String, Text, DateTime, Float, ForeignKey, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime

Base = declarative_base()

class Session(Base):
    """Represents a complete agent workflow session"""
    __tablename__ = 'sessions'

    id = Column(Integer, primary_key=True, autoincrement=True)
    topic = Column(Text, nullable=False)
    analysis = Column(Text)  # JSON string of topic analysis
    created_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime)
    status = Column(String(50), default='active')  # active, completed, failed, cancelled
    error_message = Column(Text)

    # Relationships
    agent_logs = relationship("AgentLog", back_populates="session", cascade="all, delete-orphan")
    research_results = relationship("ResearchResult", back_populates="session", cascade="all, delete-orphan")
    keywords = relationship("Keyword", back_populates="session", cascade="all, delete-orphan")
    generated_content = relationship("GeneratedContent", back_populates="session", cascade="all, delete-orphan")
    agent_handoffs = relationship("AgentHandoff", back_populates="session", cascade="all, delete-orphan")

class AgentLog(Base):
    """Logs all agent actions and executions"""
    __tablename__ = 'agent_logs'

    id = Column(Integer, primary_key=True, autoincrement=True)
    session_id = Column(Integer, ForeignKey('sessions.id'), nullable=False)
    agent_name = Column(String(100), nullable=False)
    action = Column(String(200), nullable=False)
    input_data = Column(Text)  # JSON string
    output_data = Column(Text)  # JSON string
    timestamp = Column(DateTime, default=datetime.utcnow)
    duration_ms = Column(Integer)
    success = Column(Boolean, default=True)
    error_message = Column(Text)

    # Relationships
    session = relationship("Session", back_populates="agent_logs")

class ResearchResult(Base):
    """Stores research results from web researcher agent"""
    __tablename__ = 'research_results'

    id = Column(Integer, primary_key=True, autoincrement=True)
    session_id = Column(Integer, ForeignKey('sessions.id'), nullable=False)
    source_url = Column(Text)
    title = Column(Text)
    content = Column(Text, nullable=False)
    relevance_score = Column(Float, default=0.0)
    credibility_score = Column(Float, default=0.0)
    timestamp = Column(DateTime, default=datetime.utcnow)
    extra_metadata = Column(Text)  # JSON string for additional data

    # Relationships
    session = relationship("Session", back_populates="research_results")

class Keyword(Base):
    """Stores keywords and hashtags generated by keyword agent"""
    __tablename__ = 'keywords'

    id = Column(Integer, primary_key=True, autoincrement=True)
    session_id = Column(Integer, ForeignKey('sessions.id'), nullable=False)
    keyword = Column(Text, nullable=False)
    keyword_type = Column(String(50), default='keyword')  # keyword, hashtag
    relevance_score = Column(Float, default=0.0)
    category = Column(String(100))

    # Relationships
    session = relationship("Session", back_populates="keywords")

class GeneratedContent(Base):
    """Stores generated content (posts, dialogs)"""
    __tablename__ = 'generated_content'

    id = Column(Integer, primary_key=True, autoincrement=True)
    session_id = Column(Integer, ForeignKey('sessions.id'), nullable=False)
    content_type = Column(String(50), nullable=False)  # linkedin_post, voice_dialog
    content = Column(Text, nullable=False)
    content_metadata = Column(Text)  # JSON string metadata (word count, tone, etc.)
    quality_score = Column(Float, default=0.0)
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    session = relationship("Session", back_populates="generated_content")

class AgentHandoff(Base):
    """Tracks agent-to-agent handoffs and communications"""
    __tablename__ = 'agent_handoffs'

    id = Column(Integer, primary_key=True, autoincrement=True)
    session_id = Column(Integer, ForeignKey('sessions.id'), nullable=False)
    from_agent = Column(String(100), nullable=False)
    to_agent = Column(String(100), nullable=False)
    action = Column(String(200), nullable=False)
    payload = Column(Text)  # JSON string
    timestamp = Column(DateTime, default=datetime.utcnow)
    response_time_ms = Column(Integer)

    # Relationships
    session = relationship("Session", back_populates="agent_handoffs")